class TrieNode:
    def __init__(self):
        self.children = {}
        self.isword = False
    
    def addword(self, root, word):
        
        curr = self
        for c in word:
            if c not in curr.children:
                curr.children[c] = TrieNode()
            curr = curr.children[c]
            
        curr.isword = True
            
class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        
        root = TrieNode()
        
        for word in words:
            root.addword(root, word)
        
        m, n = len(board), len(board[0])
        res, visit = set(), set()
        
        def dfs(i, j, node, word):
            if i < 0 or j < 0 or i > m-1 or j > n-1 or board[i][j] not in node.children or (i, j) in visit:
                return 
            
            visit.add((i, j))
            node = node.children[board[i][j]]
            word += board[i][j]
            if node.isword:
                res.add(word)
                
            dfs(i+1, j, node, word)
            dfs(i-1, j, node, word)
            dfs(i, j+1, node, word)
            dfs(i, j-1, node, word)
            
            visit.remove((i, j))    
        
        for i in range(m):
            for j in range(n):
                dfs(i, j, root, "")
                
        return list(res)
